openapi: 3.0.0
info:
  title: 'CIAB backend API'
  description: 'The CIAB RESTful Web API is designed to allow access to the Con In A Box functionality from a variety of web clients as well as more cleanly divide the front end and back ends of the main CIAB web site.'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: '0.1'
servers:
  -
    url: 'http://localhost:8080/api'
    description: Sign-in
paths:
  '/announcement/{id}':
    get:
      tags:
        - announcements
      summary: 'Gets an announcement'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the announcement'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Announcement found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/announcement'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/announce_not_found'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - announcements
      summary: 'Updates a announcement'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the announcement'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                Department:
                  type: integer
                  nullable: true
                Text:
                  type: string
                  nullable: true
                Scope:
                  type: integer
                  nullable: true
              type: object
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/department_not_found'
      security:
        -
          ciab_auth: []
    delete:
      tags:
        - announcements
      summary: 'Deletes an announcement'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the announcement'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/announce_not_found'
      security:
        -
          ciab_auth: []
  '/department/{id}/announcements':
    get:
      tags:
        - departments
      summary: 'Lists announcements for a given department'
      parameters:
        -
          name: id
          in: path
          description: 'The id or name of the department'
          required: true
          schema:
            oneOf:
              -
                description: 'Department id'
                type: integer
              -
                description: 'Department name'
                type: string
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/announcement_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/department_not_found'
      security:
        -
          ciab_auth: []
  '/member/{id}/announcements':
    get:
      tags:
        - members
      summary: 'Lists announcements for a given member'
      parameters:
        -
          name: id
          in: path
          description: 'The id or login of the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member login'
                type: string
              -
                description: 'Member id'
                type: integer
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/announcement_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/member_not_found'
      security:
        -
          ciab_auth: []
  '/department/{id}/announcement':
    post:
      tags:
        - departments
      summary: 'Adds a new announcement'
      parameters:
        -
          name: id
          in: path
          description: 'The id or name of the department'
          required: true
          schema:
            oneOf:
              -
                description: 'Department id'
                type: integer
              -
                description: 'Department name'
                type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                text:
                  type: string
                scope:
                  type: integer
              type: object
      responses:
        '201':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Department or Member not found in the system'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        -
          ciab_auth: []
  '/cycle/{id}':
    get:
      tags:
        - cycles
      summary: 'Gets an cycle'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the cycle'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Cycle found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cycle'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/cycle_not_found'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - cycles
      summary: 'Updates a cycle'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the cycle'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                date_from:
                  type: string
                  format: date
                  nullable: true
                date_to:
                  type: string
                  format: date
                  nullable: true
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cycle'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/cycle_not_found'
      security:
        -
          ciab_auth: []
    delete:
      tags:
        - cycles
      summary: 'Deletes an cycle'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the cycle'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/cycle_not_found'
      security:
        -
          ciab_auth: []
  /cycle:
    get:
      tags:
        - cycles
      summary: 'Lists cycles'
      parameters:
        -
          name: from
          in: query
          description: 'Start date for cycle list'
          required: false
          schema:
            type: string
            format: date
        -
          name: to
          in: query
          description: 'Final date for cycle list'
          required: false
          schema:
            type: string
            format: date
        -
          name: includesDate
          in: query
          description: 'A date that must be included in cycles in the list'
          required: false
          schema:
            type: string
            format: date
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cycle_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/cycle_not_found'
      security:
        -
          ciab_auth: []
    post:
      tags:
        - cycles
      summary: 'Adds a new cycle'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                date_from:
                  type: string
                  format: date
                date_to:
                  type: string
                  format: date
              type: object
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cycle'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Department or Member not found in the system'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        -
          ciab_auth: []
  '/deadline/{id}':
    get:
      tags:
        - deadlines
      summary: 'Gets a deadline'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the deadline'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Deadline found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deadline'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/deadline_not_found'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - deadlines
      summary: 'Updates a deadline'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the deadline'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                deadline:
                  type: string
                  format: date
                  nullable: true
                note:
                  type: string
                  nullable: true
              type: object
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/deadline_not_found'
      security:
        -
          ciab_auth: []
    delete:
      tags:
        - deadlines
      summary: 'Deletes a deadline'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the deadline'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/deadline_not_found'
      security:
        -
          ciab_auth: []
  '/department/{id}/deadline':
    post:
      tags:
        - departments
      summary: 'Adds a new deadline'
      parameters:
        -
          name: id
          in: path
          description: 'The id or name of the department'
          required: true
          schema:
            oneOf:
              -
                description: 'Department id'
                type: integer
              -
                description: 'Department name'
                type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                deadline:
                  type: string
                  format: date
                note:
                  type: string
              type: object
      responses:
        '201':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/department_not_found'
      security:
        -
          ciab_auth: []
  '/department/{id}':
    get:
      tags:
        - departments
      summary: 'Gets a department'
      parameters:
        -
          name: id
          in: path
          description: 'Id or name of the deadline'
          required: true
          schema:
            oneOf:
              -
                description: 'Department id'
                type: integer
              -
                description: 'Department name'
                type: string
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Department found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/department'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/department_not_found'
      security:
        -
          ciab_auth: []
  '/department/{id}/children':
    get:
      tags:
        - departments
      summary: 'Lists children of the department'
      parameters:
        -
          name: id
          in: path
          description: 'Id or name of the deadline'
          required: true
          schema:
            oneOf:
              -
                description: 'Department name'
                type: string
              -
                description: 'Department id'
                type: integer
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/department_list'
        '401':
          $ref: '#/components/responses/401'
      security:
        -
          ciab_auth: []
  '/department/{id}/deadlines':
    get:
      tags:
        - departments
      summary: 'Lists deadlines for a given department'
      parameters:
        -
          name: id
          in: path
          description: 'The id or name of the department'
          required: true
          schema:
            oneOf:
              -
                description: 'Department id'
                type: integer
              -
                description: 'Department name'
                type: string
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deadline_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/department_not_found'
      security:
        -
          ciab_auth: []
  /department:
    get:
      tags:
        - departments
      summary: 'Lists departments'
      parameters:
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/department_list'
        '401':
          $ref: '#/components/responses/401'
      security:
        -
          ciab_auth: []
  '/event/{id}':
    get:
      tags:
        - events
      summary: 'Gets an event'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the event'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Event found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
    delete:
      tags:
        - events
      summary: 'Deletes an event'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the event'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
  /event:
    get:
      tags:
        - events
      summary: 'Lists events'
      parameters:
        -
          name: begin
          in: query
          description: 'First date to search from.'
          required: false
          style: form
          schema:
            type: string
            format: date
        -
          name: end
          in: query
          description: 'Last date to search until.'
          required: false
          style: form
          schema:
            type: string
            format: date
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_list'
        '401':
          $ref: '#/components/responses/401'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - events
      summary: 'Modifies an existing event.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the event'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                date_from:
                  type: string
                  format: date
                date_to:
                  type: string
                  format: date
                name:
                  type: string
              type: object
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
    post:
      tags:
        - events
      summary: 'Adds a new event'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                date_from:
                  type: string
                  format: date
                date_to:
                  type: string
                  format: date
                name:
                  type: string
              type: object
      responses:
        '201':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '400':
          description: 'Cycle not found in the system which contains event dates.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        -
          ciab_auth: []
  /member/find:
    get:
      tags:
        - members
      summary: 'Search for a member based on the query'
      parameters:
        -
          name: q
          in: query
          description: 'Query string'
          required: true
          schema:
            type: string
        -
          name: from
          in: query
          description: 'Comma seperated list of attributes to be searched, default = ''all'''
          required: false
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - all
                - email
                - id
                - legal_name
                - name
                - badge
        -
          name: partial
          in: query
          description: 'Allow partial matches, default is false'
          required: false
          schema:
            type: boolean
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Member(s) found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/member_not_found'
      security:
        -
          ciab_auth: []
  '/member/{id}/configuration/{field}':
    get:
      tags:
        - members
      summary: 'Get a configuration setting for a member'
      parameters:
        -
          name: id
          in: path
          description: 'The id or login of the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member login'
                type: string
              -
                description: 'Member id'
                type: integer
        -
          name: field
          in: path
          description: 'Configuration setting field'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/configuration_not_found'
      security:
        -
          ciab_auth: []
  '/member/{id}/configuration':
    get:
      tags:
        - members
      summary: 'Get all configuration settings for a member'
      parameters:
        -
          name: id
          in: path
          description: 'The id or login of the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member login'
                type: string
              -
                description: 'Member id'
                type: integer
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/configuration_not_found'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - members
      summary: 'Updates a member configuration setting'
      parameters:
        -
          name: id
          in: path
          description: 'The id or login of the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member login'
                type: string
              -
                description: 'Member id'
                type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                Field:
                  type: string
                  nullable: false
                Value:
                  type: string
                  nullable: false
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/configuration_not_found'
      security:
        -
          ciab_auth: []
  '/member/{id}':
    get:
      tags:
        - members
      summary: 'Gets a member'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the member.'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Member found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/member_not_found'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - members
      summary: 'Updates a member'
      parameters:
        -
          name: id
          in: path
          description: 'The id or login of the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member login'
                type: string
              -
                description: 'Member id'
                type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/member_body'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
        '400':
          description: 'Parameter is missing or invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          $ref: '#/components/responses/401'
      security:
        -
          ciab_auth: []
  /member:
    get:
      tags:
        - members
      summary: 'Gets current member'
      responses:
        '200':
          description: 'Member found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/member_not_found'
      security:
        -
          ciab_auth: []
    post:
      tags:
        - members
      summary: 'Adds a new member'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/member_body'
      responses:
        '201':
          description: OK
        '409':
          description: 'Email address already in use.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '400':
          description: 'Required parameters missing.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  '/member/{name}/status':
    get:
      tags:
        - members
      summary: 'Gets the status of an member account.'
      parameters:
        -
          name: name
          in: path
          description: 'login for the account'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Member status found'
          content:
            application/json:
              schema:
                properties:
                  type: { type: string, enum: [member_status] }
                  status: { description: 'Member account status code', type: integer, enum: [0, 1, 2, 3] }
                type: object
        '404':
          $ref: '#/components/responses/member_not_found'
  '/member/{id}/deadlines':
    get:
      tags:
        - members
      summary: 'Lists deadlines for a given member'
      parameters:
        -
          name: id
          in: path
          description: 'The id or login of the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member login'
                type: string
              -
                description: 'Member id'
                type: integer
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deadline_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/member_not_found'
      security:
        -
          ciab_auth: []
  '/member/{email}/password':
    post:
      tags:
        - members
      summary: 'Requests a password reset for a member'
      parameters:
        -
          name: email
          in: path
          description: 'The id or login email for the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member ID'
                type: integer
              -
                description: 'Member login email'
                type: string
      responses:
        '201':
          description: OK
        '404':
          $ref: '#/components/responses/member_not_found'
  '/member/{id}/password':
    put:
      tags:
        - members
      summary: 'Updates a member''s password'
      parameters:
        -
          name: id
          in: path
          description: 'The id or login of the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member login'
                type: string
              -
                description: 'Member id'
                type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                OldPassword:
                  type: string
                  nullable: false
                NewPassword:
                  type: string
                  nullable: false
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
        '400':
          description: 'Parameter is missing or invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          $ref: '#/components/responses/401'
      security:
        -
          ciab_auth: []
  '/member/{email}/password/recovery':
    put:
      tags:
        - members
      summary: 'Updates a member''s password with recovery code'
      parameters:
        -
          name: email
          in: path
          description: 'The login email of the member'
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                OneTimeCode:
                  type: string
                  nullable: false
                NewPassword:
                  type: string
                  nullable: false
              type: object
      responses:
        '200':
          description: OK
        '400':
          description: 'Parameter is missing or invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  '/admin/SUDO/{id}':
    post:
      tags:
        - administrative
      summary: 'Convert current session to that of another member.'
      parameters:
        -
          name: id
          in: path
          description: 'The id or login of the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member login'
                type: string
              -
                description: 'Member id'
                type: integer
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/member_not_found'
      security:
        -
          ciab_auth: []
  /payment/:
    post:
      tags:
        - payments
      summary: 'Start a new payment'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                success:
                  type: string
                  format: url
                cancel:
                  type: string
                  format: url
                cart:
                  type: array
                  items: {  }
              type: object
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Payment Processor Not Found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        -
          ciab_auth: []
  '/permissions/method/{resource}':
    get:
      tags:
        - permissions
      summary: 'Gets permissions on a resource by method'
      parameters:
        -
          name: resource
          in: path
          description: 'Resource being queried.'
          required: true
          schema:
            type: string
            enum:
              - announcement
              - deadline
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Permissions found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permission_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/permission_not_found'
      security:
        -
          ciab_auth: []
  '/permissions/method/{resource}/{method}':
    get:
      tags:
        - permissions
      summary: 'Gets a method permission'
      parameters:
        -
          name: resource
          in: path
          description: 'Resource being queried.'
          required: true
          schema:
            type: string
            enum:
              - announcement
              - deadline
        -
          name: method
          in: path
          description: 'Method being queried.'
          required: true
          schema:
            type: string
            enum:
              - get
              - put
              - post
              - delete
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Permissions found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permission_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/permission_not_found'
      security:
        -
          ciab_auth: []
  '/permissions/method/{resource}/{method}/{department}':
    get:
      tags:
        - permissions
      summary: 'Gets a method permission'
      parameters:
        -
          name: resource
          in: path
          description: 'Resource being queried.'
          required: true
          schema:
            type: string
            enum:
              - announcement
              - deadline
        -
          name: method
          in: path
          description: 'Method being queried.'
          required: true
          schema:
            type: string
            enum:
              - get
              - put
              - post
              - delete
        -
          name: department
          in: path
          description: 'The Id or name of the department'
          required: true
          schema:
            oneOf:
              -
                description: 'Department id'
                type: integer
              -
                description: 'Department name'
                type: string
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Permissions found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permission_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/permission_not_found'
      security:
        -
          ciab_auth: []
  '/permissions/resource/{resource}/{department}':
    get:
      tags:
        - permissions
      summary: 'Gets a resource permission'
      parameters:
        -
          name: resource
          in: path
          description: 'Resource being queried.'
          required: true
          schema:
            type: string
            enum:
              - announcement
              - deadline
        -
          name: department
          in: path
          description: 'The Id or name of the department'
          required: true
          schema:
            oneOf:
              -
                description: 'Department name'
                type: integer
              -
                description: 'Department id'
                type: string
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Permissions found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permission_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/permission_not_found'
      security:
        -
          ciab_auth: []
  '/permissions/resource/{resource}/{department}/{method}':
    get:
      tags:
        - permissions
      summary: 'Gets a resource permission'
      parameters:
        -
          name: resource
          in: path
          description: 'Resource being queried.'
          required: true
          schema:
            type: string
            enum:
              - announcement
              - deadline
        -
          name: department
          in: path
          description: 'The Id or name of the department'
          required: true
          schema:
            oneOf:
              -
                description: 'Department name'
                type: integer
              -
                description: 'Department id'
                type: string
        -
          name: method
          in: path
          description: 'Method being queried.'
          required: true
          schema:
            type: string
            enum:
              - get
              - put
              - post
              - delete
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Permissions found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permission_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/permission_not_found'
      security:
        -
          ciab_auth: []
  '/stores/{id}':
    get:
      tags:
        - stores
      summary: 'Gets a store'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the store.'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Store found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store'
        '404':
          $ref: '#/components/responses/store_not_found'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - stores
      summary: 'Updates a store'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the store'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                store_slug:
                  type: string
                name:
                  type: string
                description:
                  type: string
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/store_not_found'
      security:
        -
          ciab_auth: []
    delete:
      tags:
        - stores
      summary: 'Deletes a store'
      parameters:
        -
          name: id
          in: path
          description: 'Id of a store'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/store_not_found'
      security:
        -
          ciab_auth: []
  /stores:
    get:
      tags:
        - stores
      summary: 'Lists stores'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store_list'
    post:
      tags:
        - stores
      summary: 'Adds a new store'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                store_slug:
                  type: string
                  nullable: false
                name:
                  type: string
                  nullable: false
                description:
                  type: string
              type: object
      responses:
        '201':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '400':
          description: 'Invalid parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        -
          ciab_auth: []
  '/admin/configuration/{field}':
    get:
      tags:
        - administrative
      summary: 'Get a configuration setting for the site'
      parameters:
        -
          name: field
          in: path
          description: 'Configuration setting field'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/configuration_not_found'
      security:
        -
          ciab_auth: []
  /admin/configuration:
    get:
      tags:
        - administrative
      summary: 'Get all configuration settings for the site'
      parameters:
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/configuration_not_found'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - administrative
      summary: 'Updates a site configuration setting'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                Field:
                  type: string
                  nullable: false
                Value:
                  type: string
                  nullable: false
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/configuration_not_found'
      security:
        -
          ciab_auth: []
  /admin/log:
    get:
      tags:
        - administrative
      summary: 'Read the system log'
      responses:
        '200':
          description: 'Log entries found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/log'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Log entries not found on the system.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        -
          ciab_auth: []
  '/registration/admin/configuration/{field}':
    get:
      tags:
        - registration
      summary: 'Get a configuration setting for registration'
      parameters:
        -
          name: field
          in: path
          description: 'Configuration setting field'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/configuration_not_found'
      security:
        -
          ciab_auth: []
  /registration/admin/configuration:
    get:
      tags:
        - registration
      summary: 'Get all configuration settings for registration'
      parameters:
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/configuration_not_found'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - registration
      summary: 'Updates a registration configuration setting'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                Field:
                  type: string
                  nullable: false
                Value:
                  type: string
                  nullable: false
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/configuration_not_found'
      security:
        -
          ciab_auth: []
  '/registration/open/{event}':
    get:
      tags:
        - registration
      summary: 'Returns if event registration is open or not..'
      parameters:
        -
          name: event
          in: path
          description: 'Event ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Event registration open status'
          content:
            application/json:
              schema:
                properties:
                  type: { type: string, enum: [registration] }
                  event: { description: 'event Id', type: integer }
                  open: { description: 'Is registration open', type: boolean }
                type: object
        '404':
          $ref: '#/components/responses/event_not_found'
  /registration/open:
    get:
      tags:
        - registration
      summary: 'Returns if current event registration is open or not..'
      responses:
        '200':
          description: 'Event registration open status'
          content:
            application/json:
              schema:
                properties:
                  type: { type: string, enum: [registration] }
                  event: { description: 'event Id', type: integer }
                  open: { description: 'Is registration open', type: boolean }
                type: object
  /registration/admin:
    get:
      tags:
        - registration
      summary: 'Returns is the current account is a registration admin.'
      responses:
        '200':
          description: 'Member status found'
          content:
            application/json:
              schema:
                properties:
                  admin: { type: boolean, enum: [true] }
                type: object
        '401':
          $ref: '#/components/responses/401'
      security:
        -
          ciab_auth: []
  '/registration/ticket/{id}/checkin':
    put:
      tags:
        - registration
      summary: 'Check in a ticket and generate boarding pass'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Update Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/{id}':
    get:
      tags:
        - registration
      summary: 'Gets a registration ticket'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket.'
          required: true
          schema:
            type: integer
        -
          name: show_void
          in: query
          description: 'Show voided tickets as well.'
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Ticket found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/member_not_found'
      security:
        -
          ciab_auth: []
    put:
      tags:
        - registration
      summary: 'Updates ticket information.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                badge_name:
                  type: string
                emergency_contact:
                  type: string
                note:
                  type: string
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Update Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
    delete:
      tags:
        - registration
      summary: 'Deletes a ticket'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/{id}/email':
    put:
      tags:
        - registration
      summary: 'Email the boarding pass to the ticket holder.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Update Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/type/{id}/{event}':
    get:
      tags:
        - registration
      summary: 'Gets a ticket type for an event'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket type'
          required: true
          schema:
            type: integer
        -
          name: event
          in: path
          description: 'Id of the event'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Ticket type found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket_type'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/type/{id}':
    get:
      tags:
        - registration
      summary: 'Gets a ticket type for the current event'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket type'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Ticket type found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket_type'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  /registration/ticket/type:
    get:
      tags:
        - registration
      summary: 'List all ticket types for the current event'
      parameters:
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Ticket type found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket_type_list'
        '401':
          $ref: '#/components/responses/401'
      security:
        -
          ciab_auth: []
  '/registration/ticket/list/unclaimed/{event}':
    get:
      tags:
        - registration
      summary: 'Gets all unclaimed tickets for an event'
      parameters:
        -
          name: event
          in: path
          description: 'Id of the event'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/show_void'
        -
          $ref: '#/components/parameters/show_checked_in'
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Tickets found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
  /registration/ticket/list/unclaimed:
    get:
      tags:
        - registration
      summary: 'Gets unclaimed tickets the current event'
      parameters:
        -
          $ref: '#/components/parameters/show_void'
        -
          $ref: '#/components/parameters/show_checked_in'
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Tickets found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/list/{member}/{event}':
    get:
      tags:
        - registration
      summary: 'Gets tickets for an event for a member'
      parameters:
        -
          name: member
          in: path
          description: 'The member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member email'
                type: string
              -
                description: 'Member id'
                type: integer
        -
          name: event
          in: path
          description: 'Id of the event'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/show_void'
        -
          $ref: '#/components/parameters/show_checked_in'
        -
          $ref: '#/components/parameters/show_picked_up'
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Tickets found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/list/{member}':
    get:
      tags:
        - registration
      summary: 'Gets tickets for a member for the current event'
      parameters:
        -
          name: member
          in: path
          description: 'The member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member email'
                type: string
              -
                description: 'Member id'
                type: integer
        -
          $ref: '#/components/parameters/show_void'
        -
          $ref: '#/components/parameters/show_checked_in'
        -
          $ref: '#/components/parameters/show_picked_up'
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Tickets found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
  /registration/ticket/list:
    get:
      tags:
        - registration
      summary: 'Gets tickets for the current member for the current event'
      parameters:
        -
          $ref: '#/components/parameters/show_void'
        -
          $ref: '#/components/parameters/show_checked_in'
        -
          $ref: '#/components/parameters/show_picked_up'
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Tickets found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/{id}/lost':
    put:
      tags:
        - registration
      summary: 'Report the badge for the ticket lost.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Update Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/{id}/pickup':
    put:
      tags:
        - registration
      summary: 'Report the badge for the ticket as picked up.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Update Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  /registration/ticket:
    post:
      tags:
        - registration
      summary: 'Create a new Ticket'
      parameters:
        -
          $ref: '#/components/parameters/short_response'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                member:
                  type: string
                event:
                  type: string
                ticket_type:
                  type: string
                badge_dependent_on:
                  type: string
                badge_name:
                  type: string
                emergency_contact:
                  type: string
                registered_by:
                  type: string
              type: object
      responses:
        '201':
          description: 'Ticket created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/event_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/{id}/print':
    put:
      tags:
        - registration
      summary: 'Send the badge for the ticket to the print queue.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Update Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  /registration/ticket/printqueue:
    get:
      tags:
        - registration
      summary: 'Get the current print queue for badges for the current event.'
      parameters:
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/print_queue'
        '401':
          $ref: '#/components/responses/401'
      security:
        -
          ciab_auth: []
  '/registration/ticket/printqueue/{event}':
    get:
      tags:
        - registration
      summary: 'Get the current print queue for badges for the given event.'
      parameters:
        -
          name: event
          in: path
          description: 'Event being queried.'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/print_queue'
        '401':
          $ref: '#/components/responses/401'
      security:
        -
          ciab_auth: []
  '/registration/ticket/printqueue/claim/{id}':
    put:
      tags:
        - registration
      summary: 'Claim and clear a job from the print queue.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Update Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/{id}/reinstate':
    put:
      tags:
        - registration
      summary: 'Reinstate a voided ticket.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Update Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  '/registration/ticket/{id}/void':
    put:
      tags:
        - registration
      summary: 'Void a ticket.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the ticket'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Update Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          $ref: '#/components/responses/ticket_not_found'
      security:
        -
          ciab_auth: []
  '/staff_membership/{id}':
    get:
      tags:
        - staff
      summary: 'Gets staff position'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the staff position.'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Member staff positions found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staff_entry'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/staff_not_found'
      security:
        -
          ciab_auth: []
    delete:
      tags:
        - staff
      summary: 'Deletes a staff member.'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the position'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/staff_not_found'
      security:
        -
          ciab_auth: []
  '/department/{id}/staff':
    get:
      tags:
        - departments
      summary: 'List staff for a department'
      parameters:
        -
          name: id
          in: path
          description: 'Department being listed'
          required: true
          schema:
            type: integer
        -
          name: event
          in: query
          description: 'Event id being querried, if empty then current event'
          required: false
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staff_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Event or Department not found in the system.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        -
          ciab_auth: []
  '/member/{id}/staff_membership':
    get:
      tags:
        - members
      summary: 'Gets staff positions for a member'
      parameters:
        -
          name: id
          in: path
          description: 'Id of the member.'
          required: true
          schema:
            type: integer
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
        -
          $ref: '#/components/parameters/short_response'
      responses:
        '200':
          description: 'Member staff positions found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staff_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/member_not_found'
      security:
        -
          ciab_auth: []
  /member/staff_membership/:
    get:
      tags:
        - members
      summary: 'Gets staff positions for the current member'
      parameters:
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: 'Member staff positions found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staff_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/member_not_found'
      security:
        -
          ciab_auth: []
  /department/staff/:
    get:
      tags:
        - departments
      summary: 'List staff all departments'
      parameters:
        -
          name: event
          in: query
          description: 'Event id being querried, if empty then current event'
          required: false
          schema:
            type: integer
        -
          $ref: '#/components/parameters/short_response'
        -
          $ref: '#/components/parameters/max_results'
        -
          $ref: '#/components/parameters/page_token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staff_list'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Event or Department not found in the system.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        -
          ciab_auth: []
  'member/{id}/staff_membership':
    post:
      tags:
        - members
      summary: 'Adds a new staff membership to a member'
      parameters:
        -
          name: id
          in: path
          description: 'The id or email of the member'
          required: true
          schema:
            oneOf:
              -
                description: 'Member ID'
                type: integer
              -
                description: 'Member login email'
                type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                Department:
                  description: 'Id or name of the department'
                  type: string
                  nullable: false
                Position:
                  description: 'ID of the position'
                  type: integer
                  nullable: false
                Note:
                  type: string
                  nullable: true
                Event:
                  description: 'If not present, current event'
                  type: integer
                  nullable: true
              type: object
      responses:
        '201':
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/department_not_found'
      security:
        -
          ciab_auth: []
components:
  schemas:
    announcement:
      properties:
        type:
          type: string
          enum:
            - announcement
        id:
          description: 'announcement ID'
          type: integer
        posted_on:
          description: 'Date the announcement was first posted'
          type: string
          format: date
        department:
          description: 'Department for the announcement'
          oneOf:
            -
              $ref: '#/components/schemas/department'
            -
              description: 'Department Id'
              type: integer
        posted_by:
          description: 'The member who created the announcement'
          oneOf:
            -
              $ref: '#/components/schemas/member'
            -
              description: 'Member Id'
              type: integer
        scope:
          description: 'The scope of the announcement'
          type: integer
        text:
          description: 'Text of the announcement'
          type: string
      type: object
    announcement_list:
      properties:
        type:
          type: string
          enum:
            - announcement_list
        data:
          description: 'List of announcements'
          type: array
          items:
            $ref: '#/components/schemas/announcement'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    error:
      properties:
        type:
          type: string
          enum:
            - error
        code:
          description: 'announcement ID'
          type: integer
        status:
          description: 'Error Status'
          type: string
        message:
          description: 'Error Message'
          type: string
      type: object
    resource_list:
      properties:
        type:
          type: string
        data:
          description: 'List of resources'
          type: array
          items: {  }
        next_page_token:
          description: 'If present, the `page_token` for the next page of results'
          type: integer
      type: object
    cycle:
      properties:
        type:
          type: string
          enum:
            - cycle
        id:
          description: 'cycle Id'
          type: integer
        date_from:
          description: 'cycle start date'
          type: string
          format: date
        date_to:
          description: 'cycle ending date'
          type: string
          format: date
      type: object
    cycle_list:
      properties:
        type:
          type: string
          enum:
            - cycle_list
        data:
          description: 'List of cycles'
          type: array
          items:
            $ref: '#/components/schemas/cycle'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    deadline:
      properties:
        type:
          type: string
          enum:
            - deadline
        id:
          description: 'Deadline Id'
          type: integer
        deadline:
          description: 'When this deadline expires'
          type: string
          format: date
        department:
          description: 'Department for the deadline'
          oneOf:
            -
              $ref: '#/components/schemas/department'
            -
              description: 'Department Id'
              type: integer
        note:
          description: 'Note about the deadline.'
          type: string
      type: object
    deadline_list:
      properties:
        type:
          type: string
          enum:
            - deadline_list
        data:
          description: 'List of deadlines'
          type: array
          items:
            $ref: '#/components/schemas/deadline'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    department:
      properties:
        type:
          type: string
          enum:
            - department
        id:
          description: 'department Id'
          type: integer
        name:
          description: 'department name'
          type: string
        parent:
          description: 'Department that is the parent of this department.'
          oneOf:
            -
              $ref: '#/components/schemas/department'
            -
              description: 'Department Id'
              type: integer
        child_count:
          description: 'Number of child departments'
          type: integer
        fallback:
          description: 'Department that is this departments fallback.'
          oneOf:
            -
              $ref: '#/components/schemas/department'
            -
              description: 'Department Id'
              type: integer
        email:
          description: 'Department''s email addresses.'
          type: array
          items:
            type: string
      type: object
    department_list:
      properties:
        type:
          type: string
          enum:
            - department_list
        data:
          description: 'List of departments'
          type: array
          items:
            $ref: '#/components/schemas/department'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    event:
      properties:
        type:
          type: string
          enum:
            - event
        id:
          description: 'event Id'
          type: integer
        cycle:
          description: 'Annual cycle this event is part of'
          oneOf:
            -
              $ref: '#/components/schemas/cycle'
            -
              description: 'Cycle Id'
              type: integer
        date_from:
          description: 'Date the event starts'
          type: string
          format: date
        date_to:
          description: 'Date the event ends'
          type: string
          format: date
        name:
          description: 'Name of the event'
          type: string
      type: object
    event_list:
      properties:
        type:
          type: string
          enum:
            - event_list
        data:
          description: 'List of events'
          type: array
          items:
            $ref: '#/components/schemas/event'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    member:
      properties:
        type:
          type: string
          enum:
            - member
        id:
          description: 'member ID'
          type: integer
      type: object
      allOf:
        -
          $ref: '#/components/schemas/member_body'
    member_body:
      properties:
        first_name:
          description: 'Members preferred first name'
          type: string
        last_name:
          description: 'Members preferred last name'
          type: string
        email:
          description: 'Members primary email'
          type: string
        legal_first_name:
          description: 'Members legal first name.'
          type: string
        legal_last_name:
          description: 'Members legal last name.'
          type: string
        middle_name:
          description: 'Member''s middle name.'
          type: string
        suffix:
          description: 'Suffix for members name.'
          type: string
        email2:
          description: 'Member''s second email.'
          type: string
        email3:
          description: 'Member''s third email'
          type: string
        phone:
          description: 'Member''s primary phone'
          type: string
        phone2:
          description: 'Member''s secondary phone'
          type: string
        address_line1:
          description: 'Member''s address line 1'
          type: string
        address_line2:
          description: 'Member''s address line 2'
          type: string
        city:
          description: 'Member''s address city.'
          type: string
        state:
          description: 'Member''s address state'
          type: string
        zip_code:
          description: 'Member''s Address Zip code.'
          type: string
        zip_plus4:
          description: 'Member''s Address Zip code suffix'
          type: string
        country:
          description: 'Member''s Address country.'
          type: string
        province:
          description: 'Member''s Address province.'
          type: string
        preferred_first_name:
          description: 'Member''s Preferred First Name.'
          type: string
        preferred_last_name:
          description: 'Member''s Preferred Last Name.'
          type: string
        deceased:
          description: 'Is member deceased.'
          type: boolean
        do_not_contact:
          description: 'Do not contact member.'
          type: boolean
        email_optout:
          description: 'Do not mass email member.'
          type: boolean
        birthdate:
          description: 'Member''s birth date.'
          type: string
          format: date
        gender:
          description: 'Member''s preferred gender string.'
          type: string
        concom_display_phone:
          description: 'If Concom display phone on list.'
          type: boolean
      type: object
    member_reference:
      properties:
        type:
          type: string
          enum:
            - member_reference
        id:
          description: 'Member Id'
          type: integer
      type: object
    member_list:
      properties:
        type:
          type: string
          enum:
            - member_list
        data:
          description: 'List of members'
          type: array
          items:
            $ref: '#/components/schemas/member_reference'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    payment:
      properties:
        type:
          type: string
          enum:
            - payment
      type: object
    permission_entry:
      properties:
        type:
          type: string
          enum:
            - permission_entry
        subtype:
          description: 'Description string about the permission'
          type: string
        allowed:
          description: 'Is the permission enabled'
          type: boolean
        action:
          $ref: '#/components/schemas/permission_action'
        subdata:
          $ref: '#/components/schemas/permission_subdata'
      type: object
    permission_subdata:
      properties:
        department:
          description: 'Id for the target department'
          type: integer
      type: object
    permission_action:
      properties:
        method:
          description: 'Name of the method'
          type: string
        href:
          description: 'URI for the method'
          type: string
          format: uri
        request:
          description: 'HTTP request type for the method'
          type: string
      type: object
    permission_list:
      properties:
        type:
          type: string
          enum:
            - permission_list
        data:
          description: 'List of permissions'
          type: array
          items:
            $ref: '#/components/schemas/permission_entry'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    store:
      properties:
        type:
          type: string
          enum:
            - store
        id:
          description: 'store Id'
          type: integer
        store_slug:
          description: 'short, unique name for store'
          type: string
        name:
          description: 'public-facing name for store, e.g. ''Membership'''
          type: string
        description:
          description: 'description of store, eventually public facing'
          type: string
      type: object
    store_list:
      properties:
        type:
          type: string
          enum:
            - store_list
        data:
          description: 'List of stores'
          type: array
          items:
            $ref: '#/components/schemas/store'
      type: object
    log_entry:
      properties:
        type:
          type: string
          enum:
            - log_entry
        id:
          description: 'Entry ID'
          type: string
        account:
          description: 'Member account generating the log'
          type: string
        function:
          description: 'Function generating the log'
          type: string
        query:
          description: 'The query string being logged'
          type: string
        date:
          description: 'When the log entry was generated'
          type: string
          format: date-time
      type: object
    log:
      properties:
        type:
          type: string
          enum:
            - log
        data:
          description: 'List of entries'
          type: array
          items:
            $ref: '#/components/schemas/log_entry'
      type: object
    configuration:
      properties:
        type:
          type: string
          enum:
            - configuration
        field:
          description: 'Configuration Field'
          type: string
        value:
          description: 'Configurtion Value'
          type: string
      type: object
    configuration_list:
      properties:
        type:
          type: string
          enum:
            - configuration_list
        data:
          description: 'List of configuration fields'
          type: array
          items:
            $ref: '#/components/schemas/configuration'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    ticket:
      properties:
        type:
          type: string
          enum:
            - ticket
        id:
          type: integer
        badge_dependent_on:
          description: 'Member badge is dependent on'
          oneOf:
            -
              $ref: '#/components/schemas/member'
            -
              description: 'Member Id'
              type: integer
        badge_name:
          type: string
        badges_picked_up:
          description: 'The number of times this badge has been printed and picked up'
          type: integer
        emergency_contact:
          type: string
        event:
          description: 'Event the badge is for'
          oneOf:
            -
              $ref: '#/components/schemas/event'
            -
              description: 'Event Id'
              type: integer
        registered_by:
          description: 'Member who create the ticket'
          oneOf:
            -
              $ref: '#/components/schemas/member'
            -
              description: 'Member Id'
              type: integer
        registration_date:
          type: string
          format: date
        boarding_pass_generated:
          type: string
          format: date
        print_requested:
          type: string
          format: date
        last_printed_date:
          type: string
          format: date
        print_request_ip:
          type: string
          format: ip
        note:
          type: string
        void_date:
          type: string
          format: date
        void_by:
          description: 'Member who voided the ticket'
          oneOf:
            -
              $ref: '#/components/schemas/member'
            -
              description: 'Member Id'
              type: integer
        void_reason:
          type: string
        ticket_type:
          description: 'Type of the ticket'
          oneOf:
            -
              $ref: '#/components/schemas/ticket_type'
            -
              description: 'Ticket Type Id'
              type: integer
        member:
          description: 'Member who the ticket is for'
          oneOf:
            -
              $ref: '#/components/schemas/member'
            -
              description: 'Member Id'
              type: integer
      type: object
    ticket_type:
      properties:
        type:
          type: string
          enum:
            - ticket_type
        id:
          type: integer
        event:
          description: 'Event the badge is for'
          oneOf:
            -
              $ref: '#/components/schemas/event'
            -
              description: 'Event Id'
              type: integer
        name:
          type: string
        avaliable_from:
          type: string
          format: date
        avaliable_to:
          type: string
          format: date
        cost:
          type: number
          format: float
        background_image:
          type: string
      type: object
    ticket_type_list:
      properties:
        type:
          type: string
          enum:
            - ticket_type_list
        data:
          type: array
          items:
            $ref: '#/components/schemas/ticket_type'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    ticket_list:
      properties:
        type:
          type: string
          enum:
            - ticket_list
        data:
          type: array
          items:
            $ref: '#/components/schemas/ticket'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    print_job:
      properties:
        type:
          type: string
          enum:
            - print_job
        id:
          type: integer
        method:
          type: string
          enum:
            - claim
        request:
          type: string
          enum:
            - PUT
        href:
          type: string
      type: object
    print_queue:
      properties:
        type:
          type: string
          enum:
            - print_queue
        data:
          description: 'List of queued print jobs'
          type: array
          items:
            $ref: '#/components/schemas/print_job'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
    staff_entry:
      properties:
        type:
          type: string
          enum:
            - staff_entry
        id:
          description: 'Entry Id'
          type: integer
        member:
          description: 'Member resource'
          oneOf:
            -
              $ref: '#/components/schemas/member'
            -
              description: 'Member Id'
              type: integer
        note:
          description: 'Note about this staffing entry'
          type: string
        position:
          description: 'Title of the staff position.'
          type: string
        departemnt:
          description: 'The department of the staff position.'
          oneOf:
            -
              $ref: '#/components/schemas/department'
            -
              description: 'departemnt Id'
              type: integer
      type: object
    staff_list:
      properties:
        type:
          type: string
          enum:
            - staff_list
        event:
          description: 'Id of the event being listed.'
          type: integer
        data:
          description: 'List of staff positions'
          type: array
          items:
            $ref: '#/components/schemas/staff_entry'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/resource_list'
  responses:
    '401':
      description: 'User is not authenticated or not authorized for the API.'
    announce_not_found:
      description: 'Announcement not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    cycle_not_found:
      description: 'Cycle not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    deadline_not_found:
      description: 'Deadline not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    department_not_found:
      description: 'Department not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    event_not_found:
      description: 'Event not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    member_not_found:
      description: 'Member not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    payment_not_found:
      description: 'Payment Processor not found.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    permission_not_found:
      description: 'Permission not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    store_not_found:
      description: 'Store not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    configuration_not_found:
      description: 'Configuration field not defined.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    ticket_not_found:
      description: 'Ticket not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    staff_not_found:
      description: 'Staff Position not found in the system.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
  parameters:
    max_results:
      name: max_results
      in: query
      description: 'Maximum members of the list per page or ''all'' (default 100).'
      required: false
      style: form
      schema:
        oneOf:
          -
            type: integer
          -
            type: string
            enum:
              - all
    page_token:
      name: page_token
      in: query
      description: 'Starting page of results.'
      required: false
      style: form
      schema:
        type: integer
    short_response:
      name: short_response
      in: query
      description: 'Do not include sub-resource structures, only Ids.'
      required: false
      style: form
      schema:
        type: integer
        enum:
          - 0
          - 1
    show_void:
      name: show_void
      in: query
      description: 'Show voided tickets as well.'
      required: false
      schema:
        type: integer
        enum:
          - 0
          - 1
    show_checked_in:
      name: checked_in
      in: query
      description: 'Show/exclude checked in'
      required: false
      schema:
        type: integer
        enum:
          - 0
          - 1
    show_picked_up:
      name: picked_up
      in: query
      description: 'Show/exclude picked up'
      required: false
      schema:
        type: integer
        enum:
          - 0
          - 1
  securitySchemes:
    ciab_auth:
      type: oauth2
      description: 'Authentication to the API server'
      flows:
        password:
          tokenUrl: api/token
          refreshUrl: api/token
          scopes:
            - ''
tags:
  -
    name: announcements
    description: 'Features around text announcements to event and event staff'
  -
    name: cycles
    description: 'Features around annual cycles'
  -
    name: deadlines
    description: 'Features around event department deadlines'
  -
    name: departments
    description: 'Features around staffing departments for events'
  -
    name: events
    description: 'Features around events'
  -
    name: members
    description: 'Features around members of events'
  -
    name: payments
    description: 'Features around payments'
  -
    name: permissions
    description: 'Querying and checking permissions in the API'
  -
    name: stores
    description: 'Features around stores'
  -
    name: administrative
    description: 'Features around Administration of the site'
  -
    name: registration
    description: 'Features around members of event registration'
  -
    name: staff
    description: 'Features around event staff. (Only avalaible if the ''staff'' module is enabled)'
externalDocs:
  description: 'View us on GitHub'
  url: 'https://github.com/CON-In-A-Box/CIAB-Portal/tree/master/api/doc'

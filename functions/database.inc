<?php

/*.
    require_module 'standard';
.*/

// Currently, this database class is set for the MySQL PDO filter/backend. Future version will expand it to be agnostic

require_once($BACKEND.'/'.$DB_BACKEND); // MyPDO Definition used

class DB
{
    private static function _getCurrentDBVersion()
    {
        /* check if we have a database at all */
        $found = false;
        $result = MyPDO::instance()->query("SHOW TABLES LIKE 'Configuration';");
        foreach ($result as $value)
            $found = true;
        if (!$found)
            return false;

        $sql = <<<SQL
            SELECT Value AS DBSchemaVersion
            FROM Configuration
            WHERE Field = 'DBSchemaVersion';
SQL;
        $result = self::run($sql);
        $value = $result->fetch();
        if ($value === false) {
            return false;
        } else {
            return $value['DBSchemaVersion'];
        }
    }

    private static function _buildMissingTables()
    {
        // This function cannot call the run function as we don't know if the activitylog table is created
        // Besides, this is maintenance, not user log tracking
        $DATADIR = $GLOBALS['BASEDIR'].'/data';

        // Capture a list of tables already created
        $result = MyPDO::instance()->query("SHOW TABLES");
        $arr = [];
        foreach ($result as $value) {
            foreach ($value as $row) {
                $arr[] = $row;
            }
        }
        // Verify every table we need exists, if not, create.
        foreach (SCHEMA::$DB_tables as $table => $fields) {
            if (in_array($table, $arr)) {
                // Table exists
                // Capture a list of fields already in the table
                $build = "SHOW COLUMNS FROM $table";
                $result = MyPDO::instance()->query($build);
                $f_arr = [];
                foreach ($result as $value) {
                   $f_arr[] = $value['Field'];
                }

                // Check the list of fields to make sure we are set
                foreach ($fields as $column => $settings) {
                    if (! in_array($column, $f_arr)) {
                        // Missing field, alter-add it
                        $build = "ALTER TABLE ".$table;
                        $build .= " ADD ".$column." ".$settings;
                        MyPDO::instance()->query($build);
                    }
                }
            } else {
                // Missing a table, build it!
                $build = 'CREATE TABLE '.$table.' (';
                foreach ($fields as $column => $setting) {
                    $build .= $column.' '.$setting.', ';
                }
                $build = rtrim($build, ', ').");";
                MyPDO::instance()->query($build);

                // If there is seed available for this table, seed it!
                if (file_exists($DATADIR.'/DBSeed/'.$table.'.sql')) {
                    $sql_data = file_get_contents($DATADIR.'/DBSeed/'.$table.'.sql');
                    MyPDO::instance()->query($sql_data);
                }
            }
        }

        //Verify primary keys
        foreach (SCHEMA::$DB_primaryKeys as $table => $keys) {
            $query = "SHOW KEYS FROM `$table` WHERE Key_name = 'PRIMARY';";
            $result = MyPDO::instance()->query($query);
            $value = $result->fetch();
            if ($value === false) {
                $build = "ALTER TABLE `".$table."` ADD PRIMARY KEY (".implode($keys, ', ').");";
                $result = MyPDO::instance()->query($build);
            }
        }

        // Capture a list of all Constraints (Foreign Keys)
        $build = "SELECT TABLE_NAME, COLUMN_NAME FROM information_schema.KEY_COLUMN_USAGE";
        $build .= " WHERE TABLE_SCHEMA = '".$GLOBALS['DBNAME']."' AND CONSTRAINT_NAME <> 'PRIMARY';";
        $result = MyPDO::instance()->query($build);
        $arr = [];
        foreach ($result as $value) {
           $arr[] = $value['TABLE_NAME'].":".$value['COLUMN_NAME'];
        }
        // Verify every foreign key we need exists, if not, create.
        foreach (SCHEMA::$DB_foreignKeys as $table => $fields) {
            foreach ($fields as $column => $referto) {
                $lookfor = $table.":".$column;
                if (!in_array($lookfor, $arr)) {
                    $build = "ALTER TABLE ".$table;
                    $build .= " ADD FOREIGN KEY (".$column.") REFERENCES ".$referto.";";
                    MyPDO::instance()->query($build);
                }
            }
        }
    }

    public function __construct()
    {
        require_once($GLOBALS['BASEDIR'].'/data/database-schema.php');
        DB::_buildMissingTables();
        if (!empty($_REQUEST['Function']) && $_REQUEST['Function'] != 'update') {
            $upgrade = DB::_getCurrentDBVersion();
            if ($upgrade != SCHEMA::$REQUIED_DB_SCHEMA) {
            // If we have to do an update, do it
                header("Location: http://".$_SERVER['SERVER_NAME']."/index.php?Function=update&from=".$upgrade."&to=".SCHEMA::$REQUIED_DB_SCHEMA);
            }
        }

    }


    private static function _dbLogEntry($sql)
    {
        if (substr(ltrim($sql), 0, 6) !== "SELECT") {
            // Prepare a log entry for this query
            $logMessage = MyPDO::instance()->prepare('INSERT INTO ActivityLog (AccountID, Function, Query) VALUES (:account, :function, :query);');
        
            if (empty($_SESSION['accountId'])) {
                $account = 0;
            }
            else {
                $account = $_SESSION['accountId'];
            }
        
            if (empty($_SESSION['Function'])) {
                $function = "public";
            }
            else {
                $function = $_SESSION['Function'];
            }

            // Use PDO to make the SQL Safe as it IS a SQL statement we are trying to capture
            $logMessage->bindParam(':account', $account, PDO::PARAM_INT);
            $logMessage->bindParam(':function', $function, PDO::PARAM_STR);
            $logMessage->bindParam(':query', $sql, PDO::PARAM_STR);

            // Write the log entry
            $logMessage->execute();
        }

    }


    public static function run($sql, $args = [])
    {
        DB::_dbLogEntry($sql); // Capture all queries in the ActivityLog
        if (!$args) {
            return MyPDO::instance()->query($sql);
        }
        $stmt = MyPDO::instance()->prepare($sql);
        $stmt->execute($args);
        return $stmt;

    }


}


$_currentCycle = null;
$_currentEvent = null;


function current_cycleID()
{
    global $_currentCycle, $db, $_SESSION;

    if ($_currentCycle == null) {
        /* Place 1 - Look for it in the session */

        if (isset($_SESSION['CurrentCycle'])) {
            return $_SESSION['CurrentCycle'];
        }

        /* Place 2 - try to get it from the database */

        $sql = "SELECT Value FROM Configuration WHERE Field='CurrentCycleID';";
        $result = $db->run($sql);
        $value = $result->fetch();
        if ($value) {
            $_currentCycle = $value['CurrentCycleID'];
            return $_currentCycle;
        }

        /* Place 3 - current calander year */

        $year = date("Y-m-d");
        $sql = "SELECT AnnualCycleID FROM AnnualCycles WHERE DateTo > '$year';";
        $result = $db->run($sql);
        $value = $result->fetch();
        if ($value) {
            $_currentCycle = $value['AnnualCycleID'];
            return $_currentCycle;
        }

        /* Fallback - Last year in database*/

        $sql = "SELECT AnnualCycleID FROM AnnualCycles ORDER BY AnnualCycleID DESC LIMIT 1;";
        $result = $db->run($sql);
        $value = $result->fetch();
        if ($value) {
            $_currentCycle = $value['AnnualCycleID'];
            return $_currentCycle;
        }

        die("Could not get Current Convention Cycle");
    }
    return $_currentCycle;

}


function current_eventID()
{
    global $_currentEvent, $db, $_SESSION;

    if ($_currentEvent == null) {
        /* Place 1 - Look for it in the session */

        if (isset($_SESSION['CurrentEvent'])) {
            return $_SESSION['CurrentEvent'];
        }

        /* Place 2 - try to get it from the database */

        $sql = "SELECT Value FROM Configuration WHERE Field='CurrentEventID';";
        $result = $db->run($sql);
        $value = $result->fetch();
        if ($value) {
            $_currentEvent = $value['CurrentEventID'];
            return $_currentEvent;
        }

        /* Place 3 - current calander year */

        $year = date("Y-m-d");
        $sql = "SELECT EventID FROM Events WHERE DateTo > '$year';";
        $result = $db->run($sql);
        $value = $result->fetch();
        if ($value) {
            $_currentEvent = $value['EventID'];
            return $_currentEvent;
        }

        /* Fallback - Last year in database*/

        $sql = "SELECT EventID FROM Events ORDER BY EventID DESC LIMIT 1;";
        $result = $db->run($sql);
        $value = $result->fetch();
        if ($value) {
            $_currentEvent = $value['AnnualCycleID'];
            return $_currentEvent;
        }

        die("Could not get Current Convention Event");
    }
    return $_currentEvent;

}


function dump_table_to_csv($table, $condition = null)
{
    global $db;

    $data = [];
    $sql = "DESCRIBE `$table`;";
    $result = $db->run($sql);
    $value = $result->fetch();
    $data[] = array();
    while ($value !== false) {
        $data[0][] = $value['Field'];
        $value = $result->fetch();
    }
    $sql = "SELECT * FROM `$table` $condition;";
    $result = $db->run($sql);
    $value = $result->fetch();
    while ($value !== false) {
        $data[] = array_values($value);
        $value = $result->fetch();
    }

    foreach($data as $line) {
        $text .= implode(",",  $line)."\n";
    }

    return $text;

}
